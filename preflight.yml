---

# This playbook creates a network, subnet and router on the overcloud
# Ansible will pick up the OpenStack environment variables from
# the operating system if an OpenStack RC file is sourced before running the
# playbook.
# To run: source overcloud and->    ansible-playbook -i inventory  preflight.yml
# For this to work you must first install pip shade:
#  sudo curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
#  sudo python get-pip.py
#  sudo pip install shade

# code sourced from https://github.com/catalyst/catalystcloud-ansible/blob/master/create-network.yml

- name: Create a network on overcloud
  hosts: localhost
  vars:
    # OpenStack authentication variables (not required if RC sourced)
    #os_auth_url: https://api.cloud.catalyst.net.nz:5000/v2.0
    #os_region: nz-por-1
    #os_az: nz-por-1a
    #os_project_name: projectname
    #os_username: username
    #os_password: password
    # Required variables
    # change if required or override at runtime using --extra-vars
    ssh_public_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub"
    # dig lookup requires dnspython
    #restricted_cidr_range: "{{ lookup('dig', 'myip.opendns.com', '@resolver1.opendns.com') + '/32' | default('0.0.0.0/0', true) }}"
    public_network_name: public
    public_subnet_name: external_subnet
    public_subnet_cidr: 10.0.0.0/24
    public_subnet_pool_start: 10.0.0.210
    public_subnet_pool_end: 10.0.0.250

    private_network_name: internal
    private_subnet_name: intrenal_subnet
    subnet_cidr: 192.168.0.0/24
    subnet_pool_start: 192.168.0.10
    subnet_pool_end: 192.168.0.30

    nameservers: [8.8.8.8]
    router_name: border-router
#    security_group_name: first-instance-sg
#    keypair_name: first-instance-key

  tasks:
    - name: Connect to the overcloud
      os_auth:

    # If you have not sourced an OpenStack RC file, you will need to pass a few
    # mandatory authentication attributes, as demonstrated below.
    #- name: Connect to the Catalyst Cloud
    #  os_auth:
    #    auth:
    #      auth_url: "{{ os_auth_url }}"
    #      username: "{{ os_username }}"
    #      password: "{{ os_password }}"
    #      project_name: "{{ os_project_name }}"

# Create public if doesn't already exsist,how to check?
#    - name: Create public network

#    - name: Create public subnet

    - name: Create private network
      os_network:
        state: present
        name: "{{ private_network_name }}"

    - name: Create private subnet
      os_subnet:
        state: present
        name: "{{ private_subnet_name }}"
        network_name: "{{ private_network_name }}"
        cidr: "{{ subnet_cidr }}"
        dns_nameservers: "{{ nameservers }}"
        allocation_pool_start: "{{ subnet_pool_start }}"
        allocation_pool_end: "{{ subnet_pool_end }}"

    - name: Create a router
      os_router:
        state: present
        name: "{{ router_name }}"
        network: public
        interfaces:
          - "{{ private_subnet_name }}"



#    - name: Create a security group
#      os_security_group:
#        state: present
#        name: "{{ security_group_name }}"
#        description: Network access for our first instance.

#    - name: Create a security group rule for SSH access
#      os_security_group_rule:
#        state: present
#        security_group: "{{ security_group_name }}"
#        protocol: tcp
#        port_range_min: 22
#        port_range_max: 22
#        remote_ip_prefix: "{{ restricted_cidr_range }}"

#    - name: Import an SSH keypair
#      os_keypair:
#        state: present
#        name: "{{ keypair_name }}"
#        public_key_file: "{{ ssh_public_key }}"



#- name: Create ext_network on OpenStack
#  hosts: localhost
#  gather_facts: false
#  tasks:
#  Create an externally accessible network named 'ext_network'.
#    - name: ext net create
#      os_network:
#      state: present
#      name: ext_network
#      external: true

# Create flavor
    - name: "Create 'tiny' flavor with 512MB of RAM, 1 virtual CPU, and 1GB of local disk."
      os_nova_flavor:
        #cloud: mycloud   -> Check if I can delete cause I source overcloudrc before running playbook.
        state: present
        name: tiny
        ram: 512
        vcpus: 1
        disk: 1
        ephemeral: 0
        is_public: True

# Get cirros image
    - name: Download cirros
      get_url:
          url: http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-i386-disk.img    #Fix to latest url LP1709052
          dest: /home/stack/cirros.img
          mode: 0664

# Upload Cirros to Glance
    - name: Upload Cirros image to Glance
      os_image:
        name: cirros
        container_format: bare
        disk_format: qcow2
        state: present
        filename: /home/stack/cirros.img
        #is_public  -> how to enable is public?

# Boot an instance
    - name: launch an instance
      os_server:
         state: present
         name: inst1
         image: cirros
         flavor: tiny
         network: internal

      #key_name: xXxXx
      #security_groups:
      #  - 3c8ee201-892b-436e-90b3-6655b10b63f1 #ANY_10_77
      #nics:
      #  - net-id: 0b842919-85d6-4e8f-90b1-32faa04e4ae9 #vlan1 (private network)
      #  - net-id: 9029f0c9-ad37-4f4f-80cf-e21852937201 #vlan2 (private network)